/* 
&display=swap
&subset=cyrillic-ext 
*/

/* ОБНУЛЕНИЕ СТИЛЕЙ */
*,
*::before,
*::after {
	margin: 0;
	padding: 0;
	border: 0;
	box-sizing: border-box;
}
li {
	list-style: none;
}
a,
a:visited {
	text-decoration: none;
}
a:hover {
	text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
	font-weight: inherit;
	font-size: inherit;
}
img {
	vertical-align: top;
}
html,
body {
	height: 100%;
}
html {
	font-size: 16px; /* по умолчанию */
}
body {
	line-height: 1;
	/* color: #000; */
	/* font-family:""; */
	overflow-x: hidden;
	font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
	background-color: #333;
}
.wrapper {
	min-height: 100%;
	padding: 30px;
}
/* ------------------------------ */

/*
CSS – переходы либо CSS – transitions могут применяться ко всем элементам и даже к псевдоэлементам. Используются для оживления нашей верстки. Что в свою очередь приводит к улучшению взаимодействия с пользователем, как правило путем приятной анимированной реакции на его действия. Например – наведение и нажатие на кнопку. Также свойства transition можно использовать для построения несложных сценариев анимации. Фактически, CSS – переходы обеспечивают смену значений других свойств с определенной анимацей и сценарием. Всю эту магию можно описать универсальным CSS свойcтвом transition, либо рядом следующих отдельных свойств: 
*/

.link {
	color: yellow;
	font-size: 14px;
}
.link:hover {
	color: red;
	font-size: 20px;
}
.link_anim {
	/*
	Определяет промежуток времени, в течение которого должен осуществляться переход. Собственно – тут мы указываем время за которое одно значение свойства по переходит (анимируется) в другое. Свойство не наследуется.
	*/
	/* transition-duration: 0.2s; */
	/*
	Содержит название CSS-свойств, к которым будет применен эффект перехода. Значение свойства может содержать как одно свойство, так и список свойств через запятую. Свойство не наследуется.	
	*/
	/* transition-property: all; */
	/*
	Задержка выполнения перехода. Позволяет сделать так, чтобы изменение свойства происходило не моментально, а с некоторой задержкой. Время задержки перехода указывается в секундах или миллисекундах. Свойство не наследуется.
	*/
	/* transition-delay: 0s; */
	/*
	Задаёт стиль нашего перехода, то есть некий сценарий, по которому будет осуществятся анимация.
	*/
	/*
	Переход начинается медленно, разгоняется быстро и замедляется в конце. 
	*/
	/* transition-timing-function: ease; */

	/* Универсальное свойство */
	/* transition: 0.3s; */
	/* 
	Порядок значений:
	property duration timing-function delay 
	*/
}
/*
.button {
	display: inline-block;
	color: #fff;
	background-color: green;
	border-radius: 10px;
	padding: 10px 15px;
	box-shadow: 0 5px 0px rgba(0, 0, 0, 0.3);
	transition: all 0.3s ease 0s;
}
.button:hover {
	transform: translate(0px, 3px);
	box-shadow: 0 2px 0px rgba(0, 0, 0, 0.3);
}
*/
/*
.menu {
	overflow: hidden;
	background-color: rgba(255, 255, 255, 0.05);
}
.menu:hover .menu__list {
	transform: translateX(0);
	transition-delay: 0s;
}

.menu:hover .menu__item {
	transform: translateX(0);
}

.menu__list {
	background-color: green;
	padding: 15px;
	transform: translateX(-100%);
	transition: 0.3s;
	transition-delay: 0.8s;
}
.menu__item {
	transform: translateX(-100%);
	transition-duration: 0.6s;
}
.menu__item:nth-child(1) {
	transition-delay: 0s;
}
.menu__item:nth-child(2) {
	transition-delay: 0.2s;
}
.menu__item:nth-child(3) {
	transition-delay: 0.4s;
}
.menu__item:nth-child(4) {
	transition-delay: 0.6s;
}
.menu__item:not(:last-child) {
	margin: 0px 0px 10px 0px;
}
.menu__link {
	color: #fff;
}
*/

/* ================================================================== */

/*
Как и CSS свойство плавных переходов transition, о котором мы говорили в предыдущем уроке, свойство animation призвано сделать нашу верстку более динамичной, оживить её для лучшего взаимодействия с пользователем и создания WOW эффекта.

Но в отличие от CSS переходов, создание анимации базируется на ключевых кадрах @keyframes, которые позволяют автоматически воспроизводить и повторять эффекты на протяжении заданного времени, а также приостанавливать анимацию по определенному событию.

Другими словами, использование конструкции animation и @keyframes позволяет нам создавать более сложные сценарии анимаций.
*/

.block {
	width: 200px;
	height: 200px;
	position: relative;
	background-color: #7a956b;

	/*
	Определяет список применяемых к элементу анимаций (ключевых кадров). Можно указать через запятую. Причем приоритет у последней записи.
	*/
	animation-name: somename;
	/*
	Отвечает за продолжительность анимации.
	*/
	animation-duration: 1s;
	/*
	Задаёт сценарий развития анимации между ключевыми кадрами.
	*/
	animation-timing-function: linear;
	/*
	Отвечает за задержку перед проигрыванием.
	*/
	animation-delay: 0s;
	/*
	Отвечает за повтор проигрывания ключевых кадров.
	*/
	animation-iteration-count: 1;
	/*
	Определяет направление и тип проигрывания ключевых кадров.
	*/
	animation-direction: alternate;
	/*
	Определяет какие значения анимируемых css свойств применятся к объекту после завершения анимации.
	*/
	animation-fill-mode: none;
	/*
	Позволяет запускать или останавливать анимацию по событию.
	*/
	animation-play-state: running;
}
.block:hover {
	animation-play-state: paused;
}
@keyframes somename {
	0% {
		/* css свойства */
		transform: translate(0px, 0px);
	}
	50% {
		background-color: #77608d;
		border-radius: 50%;
	}
	100% {
		/* css свойства */
		transform: translate(300px, 0px);
	}
}

.crescent {
	margin: 0px 0px 50px 0px;
	border-bottom: 3px solid rgb(43, 43, 43);
}
.crescent__body {
	overflow: hidden;
	width: 500px;
	height: 500px;
	transform-origin: 53.333% 68.666%;
	animation: crescent-anim 5s 1 ease-out 1s forwards;
}
.crescent__item {
	background-color: #fff;
	width: 100%;
	height: 100%;
	border-radius: 50%;
	position: relative;
	animation: crescent-init 1s 1 linear forwards;
}
.crescent__item::before {
	background-color: #333;
	border-radius: 50%;
	content: "";
	position: absolute;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	animation: crescent-shadow 1s 1 linear forwards;
}
@keyframes crescent-anim {
	0% {
		transform: rotate(0deg);
	}
	25% {
		transform: rotate(20deg);
	}
	50% {
		transform: rotate(10deg);
	}
	75% {
		transform: rotate(20deg);
	}
	100% {
		transform: rotate(15deg);
	}
}
@keyframes crescent-init {
	0% {
		transform: translate(-30%, 0px);
	}
	100% {
		transform: rotate(45deg) translate(0px, 0px);
	}
}
@keyframes crescent-shadow {
	0% {
		transform: translate(0px, 0px);
	}
	100% {
		transform: translate(-16.666%, 16.666%);
	}
}

.clock {
	border-top: 3px solid rgb(83, 83, 83);
	height: 500px;
	max-width: 900px;
	margin: 0px auto;
}
.clock__item {
	position: relative;
	width: 1px;
}
.clock__item::before {
	content: "";
	position: absolute;
	width: 2px;
	top: 0;
	height: 300px;
	background-color: rgb(83, 83, 83);
	transform-origin: 0 0;
}
.clock__item::after {
	width: 90px;
	height: 90px;
	border-radius: 50%;
	background-color: #fff;
	position: absolute;
	top: 300px;
	left: 0%;
	transform: translate(-50%, 0px);
	content: "";
}
.clock__item:nth-child(1) {
	left: 40%;
	animation: item-1 1s infinite ease-in-out alternate 0s;
}
.clock__item:nth-child(2) {
	left: 50%;
}
.clock__item:nth-child(3) {
	left: 60%;
	animation: item-2 1s infinite ease-in-out alternate 0s;
}

@keyframes item-1 {
	0% {
		transform: rotate(45deg);
	}
	50% {
		transform: rotate(0deg);
	}
}
@keyframes item-2 {
	50% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(-45deg);
	}
}
