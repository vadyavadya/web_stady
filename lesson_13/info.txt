======================= Анимация =======================
---------------transition-----------------------

CSS – переходы либо CSS – transitions могут применяться ко всем элементам и даже к псевдоэлементам. Используются для оживления нашей верстки. Что в свою очередь приводит к улучшению взаимодействия с пользователем, как правило путем приятной анимированной реакции на его действия. Например – наведение и нажатие на кнопку. Также свойства transition можно использовать для построения несложных сценариев анимации. Фактически, CSS – переходы обеспечивают смену значений других свойств с определенной анимацей и сценарием. Всю эту магию можно описать универсальным CSS свойcтвом transition, либо рядом следующих отдельных свойств


transition-duration: 0.2s; (единицы измерения  s, ms (секунды , милисекунды))
Определяет промежуток времени, в течение которого должен осуществляться переход. Собственно – тут мы указываем время за которое одно значение свойства по переходит (анимируется) в другое. Свойство не наследуется.
(transition-duration: 0.2s, 1.2s; можно через запятую для нескоьких свойств в)

transition-property: all;
Содержит название CSS-свойств, к которым будет применен эффект перехода. Значение свойства может содержать как одно свойство, так и список свойств через запятую. Свойство не наследуется.	
(transition-property: color, font-size;)

transition-delay: 1s; (можно несколько transition-delay: 1s, 2s; )
Задержка выполнения перехода. Позволяет сделать так, чтобы изменение свойства происходило не моментально, а с некоторой задержкой. Время задержки перехода указывается в секундах или миллисекундах. Свойство не наследуется.

Задаёт стиль нашего перехода, то есть некий сценарий, по которому будет осуществятся анимация.

transition-timing-function: ease; (Значения: ease, linear, steps(int,start|end)(step(2,start)))
cubic-bezier(x1,y1,x2,y2)
Переход начинается медленно, разгоняется быстро и замедляется в конце. 

Универсальное свойство
	transition: 0.3s;
	Порядок значений:
	property duration timing-function dela y 




--------------------------------------Animation--------------------------------------
Как и CSS свойство плавных переходов transition, о котором мы говорили в предыдущем уроке, свойство animation призвано сделать нашу верстку более динамичной, оживить её для лучшего взаимодействия с пользователем и создания WOW эффекта.

Но в отличие от CSS переходов, создание анимации базируется на ключевых кадрах @keyframes, которые позволяют автоматически воспроизводить и повторять эффекты на протяжении заданного времени, а также приостанавливать анимацию по определенному событию.

Другими словами, использование конструкции animation и @keyframes позволяет нам создавать более сложные сценарии анимаций.

animation-name: somename;
Определяет список применяемых к элементу анимаций (ключевых кадров). Можно указать через запятую. Причем приоритет у последней записи.


animation-timing-function: linear;
Задаёт сценарий развития анимации между ключевыми кадрами.

animation-delay: 0s;
Отвечает за задержку перед проигрыванием.

animation-iteration-count: 1; (infinit бесконечно)
Отвечает за повтор проигрывания ключевых кадров.

animation-direction: alternate; (normal, revers, alternate(туда обратно), alternate-reverse)
Определяет направление и тип проигрывания ключевых кадров.

animation-fill-mode: none;(forwords (конечное), backwords(изначальное))
Определяет какие значения анимируемых css свойств применятся к объекту после завершения анимации.

animation-play-state: running; (paused)
Позволяет запускать или останавливать анимацию по событию.

.block {
	animation-name: somename;
    ...
    }

@keyframes somename {
	0% {
		...
	}
	50% {
		...
	}
	100% {
		...
	}
}
