============================= js =============================













'use strictr';



// Проверка мобильного браузера
// import { isMobile } from "./functions";



// Пусть переменная "num" будет!
let num;

// Пусть переменная "num" содержит число 10
num = 10;

// Пусть переменная "num" содержит строку Привет!
num = "Привет!";

// Пусть константа "mainPage" ВСЕГДА содержит объект с классом .page
const mainPage = document.querySelector('.page');

// В const типе object значения можно менять!
const user = {
	name: "Максим",
	age: "26"
}
user.name = "Лоцы";
console.log(user.name)

// * Вставить переменную в строку ${someNum}
let someString = `Мне ${someNum} лет`;



// * Операторы
// * "- + * /" оператор сложения "+" НЕ преобразовывает тип данных
// * Операторы сравнения > < >= <= == === != !== 
// * Логические операторы || && !


// * Условное ветвление
if (numOne > numTwo) {
	// Выполняем програму,
	// если условие выполненно (true)
} else if (numTwo === 20) {
} else {}

// короткая запись условия (если требуется выполнить одно действие)
let redult = numOne > numTwo ? console.log('numOne больше чем numTwo') : console.log('Условия НЕ выполненны!');

// * Возвращают false: undefined, 0, "", NaN
if (numOne) {}



// * Цыклы
while (i < 5) {
	console.log(i);
	i++;
} 

// если тело состоит из одной строки
while (let i < 5) console.log(i++);

// Конструкция DO...while
let i = 0;
do {
	console.log(i);
	i++
} while (i < 5);

// Цикл for
// for (Начало; Условие; Шаг) {
// 	тело цикла
// }
// можно убрать любую часть цикла

// * можно остановить выполнение цикла break
// * перейти на следущую итерацию continue

* метки  перейти на следующкю итерацию внешнего цикла
firstFor: for (let num = 0; num < 2; num++) {
	for (let size = 0; size < 3; size++) {
		if (size == 2) {
			continue firstFor;
		}
		console.log(size);
	}
} 


// * Объявление функции (Function Declaration)
// * Функции
// Создание функции
function setConsole(someData) {
    // Выполняемый код
}
// Вызов функции
setConsole();


//Имя функции и её предназначение
Например, функции, начинающиеся с
"show..." обычно что-то показывают,
"get..." – возвращают значение,
"calc..." – что-то вычисляют,
"create..." – что-то создают,
"check..." – что-то проверяют и возвращают логическое
значение, и т.д.


// * Параметры (аргументы)
function calcSumm(numOne = 1, numTwo = 2) {
	...
}
calcSumm(5, 5);


//Функции стрелки(arrow functions)

// * Функциональное выражение (Function Expression)
let имя переменной = function (параметр, ...параметр) {
    return выражение;
};

// * Cтрелочная функция (arrow function)
let имя переменной = (параметр, ...параметр) => выражение
let имя переменной = (параметр, ...параметр) => {
	выражение
	}



// Однострочная стрелочная функция
/*
let getMessage = (text, name) => text + ', ' + name + '!';


// * Планирование setTimeout и setInterval
/*
Что бы реализовать планирование существуют два метода:
1.	setTimeout позволяет вызвать функцию один раз
    через определённый интервал времени
2.	setInterval позволяет вызывать функцию регулярно,
    повторяя вызов через определённый интервал времени.
*/
/*
setTimeout(функция или код, задержка, параметр, ...параметр);
setInterval(функция или код, задержка, параметр, ...параметр);
function showMessage(text, name) {
    console.log(`${text}, ${name}!`);
    setTimeout(showMessage, 500, text, name);
}





















// * Объекты
let userInfo = new Object(); // синтаксис "конструктор объекта"
let userInfo = {};  // синтаксис "литерал объекта"

// * Имена свойств объекта

// Имя из двух и больше слов
let userInfo = {
    name: "Вася",
    age: 30,
    "likes javascript": true,
};
console.log(userInfo.name);
console.log(userInfo['name']);
console.log(userInfo["likes javascript"]);

// Вычисляем имя
let firstPart = "likes";
let userInfo = {
    name: "Вася",
    age: 30,
    [firstPart + " javascript"]: true,
};
console.log(userInfo["likes javascript"]);

// Передаем имя
let firstPart = "likes";
let userInfo = {
    name: "Вася",
    age: 30,
    [firstPart]: true,
};
console.log(userInfo[firstPart]);

// Преимущество квадратных скобок
//let key = "name";
//console.log(userInfo[key]);

// Зарезервированные слова в именах let for 


// * Тип данных Symbol

// Создаём символ id с описанием (именем) "id"
let id = Symbol("id");
let userInfo = {
    name: "Вася",
    age: 30,
    [id]: "Некое значение"
};
console.log(userInfo);

// Основное применение символов:
// 1.«Скрытые» свойства объектов
//		Символьное свойство не появится в for..in
// 2. Использование системных символов
// 	Symbol.iterator, Symbol.toPrimitive и т.д.

// Вложенность
let userInfo = {
    name: "Вася",
    age: 30,
    address: {
        city: "Uzhhorod",
        street: "Freedom",
    }
}

// * Свойство из переменной

function makeUserInfo(name, age) {
    return {
        name: name,
        age: age,
        // ...другие свойства
    };
}

function makeUserInfo(name, age) {
    return {
        name, // Тоже самое что и  name: name,
        age,// Тоже самое что и  age: age,
        "likes javascript": true,
        // ...другие свойства
    };
}

// * Добавление свойства
let userInfo = {
    name: "Вася",
}
userInfo.age = 30;

// * Удаление свойства
let userInfo = {
    name: "Вася",
    age: 30,
    "likes javascript": true
}
delete userInfo.age;

// * Изменение свойства
let userInfo = {
    name: "Вася",
    age: 30,
}
userInfo.age = 18;


// * Копирование объектов
// * При копировании объекта в другую переменную
// * сам объект не дублируется, а копируется только ссылка на него
let userInfo = {
    name: "Вася",
    age: 30,
}
let user = userInfo;
user.age = 18;


// * Дублирование объектов (Object.assign)
// Синтаксис
//Object.assign(куда(объект), что(свойство #1), что(свойство #2), ...);
let userInfo = {
    name: "Вася",
    age: 30,
}

//Клонирование
let user = Object.assign({}, userInfo);

// * Пример: слияние объектов
let o1 = { a: 1 };
let o2 = { b: 2 };
let o3 = { c: 3 };
let obj = Object.assign({}, o1, o2, o3);
console.log(obj); // { a: 1, b: 2, c: 3 }

// Добавление свойств
let userInfo = {
    name: "Вася",
    age: 30,
}
Object.assign(userInfo, { ['likes javascript']: true, city: "Uzhhorod" });
console.log(userInfo);

// * Проверка существования свойства
if (userInfo.age) { // true или false}

// * Опциональная цепочка
let userInfo = {
    name: "Вася",
    age: 30,
    //address: {
    //	city: "Uzhhorod",
    //	street: "Freedom",
    //}
}
//console.log(userInfo.address.street); // ! получим ошибку если нет!
console.log(userInfo?.address?.street); // * использовать


// * Оператор "in".
//В большинстве случаев сработает сравнение с undefined.
//либо опциональная цепочка ?.
//Но есть особый случай, когда свойство существует,
//но содержит значение undefined.
//В этом случае необходимо использовать "in".
let userInfo = {
    //name: "Вася",
    age: 30,
    address: {
        city: "Uzhhorod",
        street: "Freedom",
    }
}
if ("name" in userInfo) {
    console.log(userInfo.name);
}

// * Цикл «for…in»
// Для перебора всех свойств объекта используется цикл for..in.
// Этот цикл отличается от изученного ранее цикла for(;;).
for (let key in object) {
    // тело цикла выполняется для каждого свойства объекта
}

// * Использование "this"
let userInfo = {
    name: "Вася",
    age: 30,
    address: {
        city: "Uzhhorod",
        street: "Freedom",
    },
    showInfo() {
        //console.log(`${userInfo.name}, ${userInfo.age} лет. Адрес: г.${userInfo.address.city}, ул.${userInfo.address.street}`);
        console.log(`${this.name}, ${this.age} лет. Адрес: г.${this.address.city}, ул.${this.address.street}`);
    }
}
userInfo.showInfo();

// * Функция-конструктор
/*
Обычный синтаксис создания объекта{... } позволяет создать
только один объект. Но зачастую нам нужно создать множество
однотипных объектов, таких как пользователи, элементы меню и т.д.
Это можно сделать при помощи функции - конструктора и оператора "new".
Функции - конструкторы являются обычными функциями.
Но есть два правила:
1. Имя функции - конструктора должно начинаться с большой буквы.
2. Функция - конструктор должна вызываться при помощи
    оператора "new".
*/
/*
function UserInfo(name) {

    // this = {}; Создается пустой объект (неявно)

    this.name = name;
    this.age = 30;

    // return this; Возвращается объект (неявно)
}

console.log(new UserInfo('Вася'));
console.log(new UserInfo('Лена'));
*/
/*
Когда мы пишем наш код, используя объекты для представления сущностей реального мира,
– это называется объектно - ориентированное программирование или сокращённо: «ООП».

ООП является большой предметной областью и интересной наукой само по себе.
Как выбрать правильные сущности ? Как организовать взаимодействие между ними ?
Это – создание архитектуры, и есть хорошие книги по этой теме,
такие как «Приёмы объектно - ориентированного проектирования.
Паттерны проектирования» авторов Эрих Гамма, Ричард Хелм, Ральф Джонсон,
Джон Влиссидес или «Объектно - ориентированный анализ и проектирование с примерами приложений»
Гради Буча, а также ещё множество других книг.
*/

Обратиться к элементу 

// querySelector('block');
const block = document.querySelector('block');


// * Пробежаться по объектам
listItems.forEach(function (listItem) {
	// Работаем с каждым объектом
});
// * Проверяем колекцию
if (listItems.length) {
	console.log('Есть!');
}

// Получаем первый объект
const list = document.querySelector('.list');
// * Проверяем один объект
if (list) {

}
*/

// * Работа с классами
// const listElement = document.querySelector('.list');

//listElement.classList.add('active');  // НЕ СТАВИТЬ ТОЧКУ!!!!!
//listElement.classList.remove('active');
//listElement.classList.toggle('active');

// * Проверяем есть ли класс у объекта, без ошибки если объекта нет
/*
if (listElement && listElement.classList.contains('list')) { // НЕ СТАВИТЬ ТОЧКУ!!!!!
	console.log('Юху!');
}



Запрет f12
window.onkeydown = function(evt) {
    if(evt.code == "F12") return false;
};