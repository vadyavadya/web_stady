lesson 2  - Строительные и строчные блоки
lesson 3  - начало с css анатомия подключение
lesson 4  - шрифты подключение и css свойства (Figma)? поису шрифтов, подключение, font-family, font-size, font-style, font-weight, color, text-align, text-decoration, text-shadow, text-transform, line-height, text-indent, letter-spacing, white-space, word-spacing
lesson 5  - отступы, ШИРИНЫ И ВЫСОТЫ, Метод вычисления общего размера, УПРАВЛЕНИЕ ПЕРЕИЗБЫТКОМ КОНТЕНТА, УПРАВЛЕНИЕ ТИПОМ ОБЪЕКТА, padding,  margin, (max-min)width, (max-min)height, box-sizing, overflow, display
lesson 6  - СВОЙСТВА ОФОРМЛЕНИЯ БЛОКОВ, BORDER, border-radius,outline,box-shadow, opacity, visibility.
lesson 7  - background
lesson 8  - Псевдоклассы и псевдоэлементы
lesson 9  - формат изображений
lesson 10 - БЕМ

meta - теги
lesson 11 - position
lesson 12 - flex
lesson 13 - adaptive


======================= CSS =======================

Подключение файла стилей

1 вариант тегом подключаем файл стилей
    <head>
        <link rel="stylesheet" href="css/style.css">
    </head>

2 вариант пишем в теге style
    <head>
        <style>
        p {
            color: red;
        }
        </style>
    </head>

3 вариан инлайн
    <p style="color:red; font-sizw:14px;"></p>
______________________________________________



Атрибут "class"

внутри ковычек можно писать мнгого классов
<p class="text block big-block"></p>

Имкена классов
    - латиница
    - нижний регистр
    - если класс состоит из 2х и более слов 
    то межк словами ставим дефис
    Пример: "big-block"
______________________________________________  


Анатомия css

Комментарий 
/* коммент */

селектор {
	css параметр;
    css параметр;
}
css параметр это
css свойство : значение свойства ;


Селекторы


Селектор тега
p {
    /* Обратились ко ВСЕМ тегам P на странице */
	color: red;
}

span {
	/* Обратились ко ВСЕМ тегам SPAN на странице */
	/* color: green; */
}


Селектор класса
cелектор класса, начинается с точки!!!
селектор класса уточняет, мы обращаемся 
только к тем объектам у ктороых есть класс текст (class="text")
если у ткга есть два класса то то на тег влияют свойства из двух классов

.имя класса {
	css параметр;
	...
	css параметр;
}

.text {
	/* Обратились ко ВСЕМ объектам на странице с классом text */
	color: red;
}
.paragraph {
	font-size: 20px;
}

Селектор ID
id уникален для тега, не моет быть два тега с одинаковым id

#block {
    color: green;
}



Приоритетность

Браузер читиает сверху вниз, тот кто ниже тот и главный
p {
	color: red;
}
p {
	color: green;
}
главнее green


* порядок в атрибуте class ничего не меняет!!!
<p class="text block big-block"></p> = <p class="big-block block text"></p>

УТОЧНЕНИЕ

и то что более уточняет тот и главнее

(селектор id)>(селектор класса)>(селектор тега)

1. Селектор класса приоритетней чем селектор тега
/* Этот приоритетней */
.text {
	color: green;
}
div {
	color: red;
}

2. Селектор ID - самый приоритетный

/* Этот приоритетней */
#block {
	color: hotpink;
}
.name {
	color: green;
}
p {
	color: red;
}

3. Уточняем обращение

Все объекты DIV c классом text
/* Этот приоритетней */
div.text {
	color: red;
}

.text {
	color: green;
}


Все объекты c классом text
.text {
	/* color: red; */
}


Все объекты c классами text и paragraph ОДНОВРЕМЕННО
/* Этот приоритетней */
.name.paragraph {
	/* color: green; */
}
.name {
	/* color: red; */
}


Вложенность
p span {
	/* Обратились ко всем тегам SPAN внутри всех тегов P */
	color: green;
}


Приоритетность по убыванию

Приоритеность БОГ
#id {
}

Приоритеность №1
.класс .класс{
}

Приоритеность №2
.класс тег{
}

Приоритеность №3
тег тег{
}

Приоритеность №4 */
тег{
}

 
Чаще всего, мы будем использовать 
селектор однго класса без вложенности
Пример:
.text {
}
______________________________________________  



Селекторы атрибутов

Используем селектор атрибута *= - значит содержит
[class*="-text"] {
	color: red;
}
______________________________________________ 


Комплексные селекторы

Перечисление
/*
селектор,селектор, ...{
    css параметр;}
*/

.about-text,
.block-text {
	/* color: red; */
}

Только первый уровень вложенности
.section > p {
	/* color: red; */
}

Обращаемся только к первому 
следующему объекту того же уровня 

.next-text + p {
	/* color: red; */
}

Обращаемся ко всем следующим объектам того же уровня

.next-text ~ p {
	/* color: red; */
}

/* Общий селектор */

/* Обращаемся ко всему */
* {
	/* color: red; */
}




















======================= Шрифты =======================
Figma

Слева есть pages и там может быть по разному может каждя 
страница быть там отдельно может быть все на одной

Если насмещали все что только можно то проще удалит дизайн из figma 
и загрузить заново


Что нужно из Figma

Это конструктивная инфа (геометрия) высота ширина и растояние от 
других объектов, стили и графика.

Стили

Стили справа во вкладке inspect  листаем в низ и там code не стоит 
100% пологаться на инфу она частично нужна. Брать надо то что нужно.

Графика 

во вкладке design внизу есть export через него и скачиваем.

Линейка menu>view>rules (shift+R)

Ctr + колесо мыши - увеличение
Пробел + мыши - двигать макет
alt + навидение мыши - растояние до объеткор от выбранного объекта
ctrl и навести мышью на обект - быстро выбрать объект


Plugin для Figma
Font Fascia - показывает семейства шрифтов и начертание
______________________________________________ 

Шрифты мы носим с собой

Поискать шрифт 
для подключения можно на fonts.google.com

Если нет на гугле
можно поискать в https://webfonts.pro/ (смотрим есть ли кирилица 
и нужна ди она) 

можем и просто погуглить шрифт

В принципе можем спросить шрифты у дизайнера

Обычтно есть формат шрифтов ttf(otf) это полноразмерный формат "исходный"
он весит много он не сжатый не используем в верстке

woff это сжатый формат используем в верстке

woff2 этот еще более сжатый используем в верстке

Если нету форматов woff woff2 то мы сами конвертируем в их сами
https://transfonter.org/ для кнвертации
______________________________________________ 

Подключение

Можно чтобы при подключении шрифт брался из интернета (подключенние 
через например fonts.google.com) или файлом.

Подключить можно 2 способами

в HTML через link

<link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Thai+Looped:wght@400;600&display=swap" rel="stylesheet">

в CSS через import

@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Thai+Looped:wght@400;600&display=swap');

Подключаем или в HTML или в css

&display=swap
Очень важная вещь он отображает страницу без шрифта пока он грузится 
после загрузки уже оттображает.

Нужно подключать все семейства шрифтов и начертания из макета!

Подключение из файла
в css пишем
@font-face {
    font-family: "Имя любое можно, но лучше имя шрифта";
    /* Путь "../"это выйти из папки, подключаем шрифт потом пишшем формат сночало более сжатый */
    src: url("../fonts/CircularStd-Book.woff2") format("woff2"), url("../fonts/CircularStd-Book.woff") format("woff");
    /* Пишем его начертание */
    font-weight: 400;
    /* его стиль наклон или норм */
    font-style: normal;
    /* ну и оптимальную подгрузку */
	font-display: swap;
}


@font-face {
	font-family: "CircularStd";
	src: url("../fonts/CircularStd-Book.woff2") format("woff2"), url("../fonts/CircularStd-Book.woff") format("woff");
	font-weight: 400;
	font-style: normal;
	font-display: swap;
}
@font-face {
	font-family: "CircularStd";
	src: url("../fonts/CircularStd-BookItalic.woff2") format("woff2"), url("../fonts/CircularStd-BookItalic.woff") format("woff");
	font-weight: 400;
	font-style: italic;
	font-display: swap;
}
@font-face {
	font-family: "CircularStd";
	src: url("../fonts/CircularStd-Black.woff2") format("woff2"), url("../fonts/CircularStd-Black.woff") format("woff");
	font-weight: 900;
	font-style: normal;
	font-display: swap;
}


Далее устанавливаем шрифт по умолчанию в body можно еще и размер
размер какой в макете больше используется тот и выгоднее поставить.

body {
    /* Пишем сперва нужный шрифт , потом наиболее похожий стандартый
     serif -  с засечками
     sans-serif - без засечек
     cursive - курсивный
     */
	font-family: "Lato", sans-serif;
    /* Указываем значение размера большенства текта */
	font-size: 20px;
}

/* ------------------ Свойства шрифта (Наследуются потомками) ------------------ */

/*
font-family: "Имя шрифта", "Имя шрифта", ...,  тип шрифта
Устанавливает семейство шрифта

Если название шрифта состоит из 2х и более слов
заключаем название в кавычки

Типы шрифта:
serif — шрифты с засечками (антиквенные), типа Times;
sans-serif — рубленные шрифты (шрифты без засечек или гротески), 
типичный представитель — Arial;
cursive — курсивные шрифты;
fantasy — декоративные шрифты;
monospace — моноширинные шрифты, ширина каждого символа 
в таком семействе одинакова (шрифт Courier).
*/

/*
font-size
Определяет размер шрифта элемента.
По умолчанию 16px
*/

/*
font-style:
Определяет начертание шрифта — обычное, курсивное или наклонное.
normal - Обычное начертание текста.
italic - Курсивное начертание. 
oblique - Наклонное начертание. Курсив и наклонный 
шрифт при всей их похожести не одно и то же. 
Курсив это специальный шрифт имитирующий рукописный, 
наклонный же образуется путем наклона обычных знаков вправо.
italic и oblique взаимо используются если нет одного, но он указан,
то используется другой, типо есть italic но указываем oblique то будет
italic, и наоборот, если есть oblique, но указываем  italic, то будет oblique
при указании любого из них и отсутсвие начертаний обоих, тогда искуственно 
наклонится шрифт!!!
*/

/*
font-weight:
если указывается значение начертание которого нету то используется ближайшее
меньшее, если нету ближайшего меньшего, то ближайшее большее.
Устанавливает насыщенность шрифта.
100 - thin
300 - Light
400 - normal
500 - medium
600 - semibold
700 - bold
900 - black
*/

----------------------- Свойства текста -----------------------


color (наследуется)
    Определяет цвет текста. Для задания цветов обычно 
    используются числа в шестнадцатеричном коде, 
    либо с помощью RGB.


.text {
	color: #f03e3e;
}


text-align (наследуется)
    Определяет горизонтальное выравнивание текста и строчный объектов
    в пределах элемента. 
    center - Выравнивание текста по центру.
    justify - Выравнивание по ширине, что означает 
    одновременное выравнивание по левому и правому краю. 
    Чтобы произвести это действие браузер в этом случае 
    добавляет пробелы между словами.
    left - Выравнивание текста по левому краю. 
    right - Выравнивание текста по правому краю.


.text {
	/* text-align: center; */
}

.block {
	/* text-align: center; */
}


text-decoration (наследуется)
    Добавляет оформление текста в виде его подчеркивания, 
    перечеркивания, линии над текстом и мигания. 
    Одновременно можно применить более одного стиля, перечисляя 
    значения через пробел. Это свойство наследуется и может принимать 
    значения:
    line-through - Создает перечеркнутый текст.
    overline - Линия проходит над текстом.
    underline - Устанавливает подчеркнутый текст. 
    none - Отменяет все эффекты, в том числе и подчеркивания у 
    ссылок, которое задано по умолчанию.


.text {
	/* text-decoration: underline; */
}



text-shadow (наследуется): 
    горизонтальное_смещение вертикальное_смещение размер цвет;
    Добавляет тень к тексту.
    Прмер: 
    text-shadow: 1px 1px 1px #000;
    При дублировании Добавляет насыщенности


.text {
	/* text-shadow: 10px 10px 30px rgb(202, 17, 17), 5px 2px 10px rgb(10, 3, 3); */
}



text-transform (наследуется)
    Управляет преобразованием текста в заглавные или прописные символы.
    capitalize  - Первый символ каждого слова в предложении будет 
    заглавным. Остальные символы свой вид не меняют.
    lowercase - Все символы текста становятся строчными 
    (нижний регистр). 
    uppercase - Все символы текста становятся прописными 
    (верхний регистр).
    none - Не меняет регистр символов.


.text {
	/* text-decoration: line-through; */
}

.link-menu {
	/* text-transform: uppercase; */
}


line-height (наследуется)
    Устанавливает межстрочный интервал текста. 
    Широко применяется при верстке текста.

    Если в макете указаны px делим это значение 
    на размер шрифта этого объекта и указываем через точку без единиц


.text {
	/* line-height: 1.5; */
}


text-indent
    Устанавливает величину отступа первой строки блока текста. 
    При меняется, если нам нужно создать что-то типа красной строки.

letter-spacing
    Определяет интервал между символами (буквами). 
    Используется когда нужно разрядить текст.

word-spacing
    Устанавливает интервал между словами.

white-space
    Управляет свойствами пробелов между словами. Пименяется в 
    основном со значением nowrap которое запрещает перенос строки. 
    Таким образом весь текст отображается в одну строку и не ломается. 
    Значение normal вернет все как было.




















======================= Отступы, Ширины.. =======================

/* -------------------- ОТСТУПЫ -------------------- */

( Ремарка Высота объекта зависит от его содержимого)

Отступы это растояние от границ обекта, есть внешний,
есть внутренний.

Внутренние отступы
Расстояние от границ объекта до ЕГО содержимого 
! только для блочных объектов
 
Значения задаются положительным числом 
и единицей измерения (px, %, em, rem)


Блочный тег <DIV> и т.п.
.block {
	/* Верхний */
	padding-top: 20px;
	/* Правый */
	padding-right: 30px;
	/* Нижний */
	padding-bottom: 50px;
	/* Левый */
	padding-left: 80px;

	/* Универсальный параметр */
	/* Анатомия */
	padding: сверху справа снизу слева;
	/* Стрелка часов 12 3 6 9 */
	padding: 20px 30px 50px 80px;


	padding: 0 0 50px 0;
	/* или */
	padding-bottom: 50px;


	/* Одинаковые значения сверху/снизу слева/справа */
	/* сверху/снизу 20px слева/справа 50px */
	padding: 20px 50px;

	/* сверху 20px снизу 40px слева/справа 50px */
	padding: 20px 50px 40px;

	/* Все значения равны */
	/* сверху/снизу слева/справа 50px */
	padding: 50px;

	/* Указание % */
	/* ! Процент от ширины родителя */
	padding: 10% 40% 10% 5%;
}


Стрнно работает! Не задаем строчныйм объектам.
Строчный тег <SPAN> и т.п.
.inline {
	padding: 50px;
}



Внешний отступ

Расстояние от границ объекта до других объектов(а) 
только для блочных объектов


Значения задаются числом и единицей 
измерения (px, %, em, rem).
Значения могут быть отрицательными

Блочный тег <DIV> и т.п.
.block {
	/* Верхний */
	margin-top: 50px;
	margin-top: -50px;
	/* Правый */
	margin-right: 50px;
	/* Нижний */
	margin-bottom: 50px;
	/* Левый */
	margin-left: 50px;

	/* Универсальный параметр */
	/* Анатомия */
	/* margin: сверху справа снизу слева; */
	/* Стрелка часов 12 3 6 9 */
	margin: 20px 30px 50px 80px;

	
	margin: 0 0 50px 0;
	/* или  */
	margin-bottom: 50px;
	

	/* Одинаковые значения сверху/снизу слева/справа */
	/* сверху/снизу 20px слева/справа 50px */
	margin: 20px 50px;

	/* сверху 20px снизу 40px слева/справа 50px */
	margin: 20px 50px 40px;

	/* Все значения равны */
	/* сверху/снизу слева/справа 50px */
	margin: 50px;

	/* Указание % */
	/* Процент от ширины родителя */
	margin: 10% 40% 10% 5%;

	/* margin: 0px 0px 20px 0px; */
}

/* Строчный тег <SPAN> и т.п. */
.inline {
	/* margin: 30px; */
}

/* ------------------- ШИРИНЫ И ВЫСОТЫ ------------------- */

Задаются числом и единицой (px, %, em, rem)

 Блочный тег <DIV>, и т.п.
.block {
	/* Конкретная ширины */
	/* width: 300px; */

	/* Ограничители ширины */

	/* Не шире чем */
	/* max-width: 300px; */

	/* Не уже чем */
	/* min-width: 300px; */

	/* Проценты от ширины родителя */
	/* width: 50%; */

	/* Конкретная высота */
	/* height: 300px; */

	/* Ограничители высоты */

	/* Не больше по высоте чем */
	/* max-height: 300px; */

	/* Не меньше по высоте чем */
	/* min-height: 300px; */

	/* Проценты от высоты родителя (*) */
	/* height: 50%; */

	/* (*) - 100500 причин чтобы заработало */
}


/* !!! НЕ работает для СТРОЧНЫХ тегов !!!*/

/* Строчный тег <SPAN>, и т.п. */
.inline {
	/* Не работает */
	/* width: 500px; */
	/* max-width: 300px; */
	/* min-width: 300px; */

	/* Не работает */
	/* height: 500px; */
	/* max-height: 300px; */
	/* min-height: 300px; */
}


/* Нюансы */

/* 1) Использование margin для выравния */
/*
Условия:
1) Объект должен быть блочным
2) Объект должен быть Уже чем родитель
3) Объекту задано выравнивание
*/

.block {
	/* Объект Уже чем родитель */
	/* max-width: 500px; */
	/* Центрирование */
	/* margin: 0px auto; */
	/* Центрирование + отступ */
	/* margin: 0px auto 20px; */

	/* Прибитие объекта к правой стороне */
	/* margin: 0 0 0 auto; */
}
.inline {
	/* Работать небудет */
	/*
	max-width: 500px;
	margin: 0px auto;
	*/
}

/* 2) Схлопывание (наложение) margin */
/* Увидим бОльшее значение */

.block {
	/* Увидим этот отступ, он больше */
	/* margin-bottom: 50px; */
}
.block-2 {
	/* margin-top: 20px; */
}

/* 3) Метод вычисления общего размера */
/*
box-sizing
Применяется для изменения алгоритма 
расчета ширины и высоты элемента. 
Свойство наследуется.
content-box - Основывается на стандартах CSS, 
при этом свойства width и height задают 
ширину и высоту контента и не включают 
в себя значения отступов, полей и границ.
border-box - Свойства width и height включают 
в себя значения полей и границ, но не отступов (margin). 
Эта модель используется браузером Internet Exporer в режиме несовместимости.
padding-box - Свойства width и height включают
в себя значения полей, но не отступов (margin) 
и границ (border). 
*/

.block {
	/* Отступ включен в ширину */
	/*
	width: 500px;
	padding: 50px;
	*/
}

/* 4) auto или 100% */
.block {
	/* По умолчанию */
	/* width: auto; */
	/* width: 100%; */
	/* margin: 0px 50px 0px 0px; */
}

/*----- УПРАВЛЕНИЕ ПЕРЕИЗБЫТКОМ КОНТЕНТА ----- */
/* ! Только блочные */
/*
overflow 
visible - Отображается все содержание элемента, даже за пределами установленной высоты и ширины. 
hidden - Отображается только область внутри элемента, 
остальное будет скрыто.
scroll - Всегда добавляются полосы прокрутки. /* В планшетном режиме scoll внизу не появляется */
auto - Полосы прокрутки добавляются только при необходимости.
*/

.block {
	/* margin: 0px 0px 50px 0px; */
	/* max-height: 100px; */

	/* По умолчанию */
	/* overflow: visible; */

	/* overflow: hidden; */
}

.block-2 {
	/* margin: 0px -50px 0px 0px; */
}

/* ---------------------- УПРАВЛЕНИЕ ТИПОМ ОБЪЕКТА ---------------------- */
/*
display:
Многоцелевое свойство, которое определяет, как элемент должен быть показан 
в документе.
Свойство не наследуется.
block - Элемент показывается как блочный. Применение этого значения для 
встроенных элементов, например тега <span>, заставляет его вести подобно 
блокам — происходит перенос строк в начале и в конце содержимого.
inline - Элемент отображается как встроенный. Использование блочных тегов, 
таких как <div> и <p>, автоматически создает перенос и показывает содержимое 
этих тегов с новой строки. Значение inline отменяет эту особенность, поэтому 
содержимое блочных элементов начинается с того места, где окончился предыдущий 
элемент. 
inline-block - Это значение генерирует блочный элемент, который обтекается 
другими элементами веб-страницы подобно встроенному элементу. Фактически такой 
элемент по своему действию похож на встраиваемые элементы (вроде тега <img>). 
При этом его внутренняя часть форматируется как блочный элемент, а сам 
элемент — как встроенный.
none - Временно удаляет элемент из документа. Занимаемое им место не 
резервируется и веб-страница формируется так, словно элемента и не было. 
*/

.block {
	/*
	margin: 0px 0px 50px 0px;
	width: 200px;
	display: inline;
	*/
}
.inline {
	/*
	margin: 50px 0px 0px 0px;
	width: 200px;
	display: block;
	*/
}

/* Гибридный (Блочно-строчный) тип */

.ex {
	/* Убрал фантомные (строчные) отступы */
	font-size: 0;
}

.inline-span {
	/*
	font-size: 20px;
	width: 150px;
	display: inline-block;
	background-color: #794f45;
	*/
}

/* Тег <IMG> блочно-строчный */
.image {
	/*
	width: 200px;
	margin: 50px 0px 0px 0px;
	*/
}

.link {
	/*
	color: green;
	margin: 0px 0px 50px 0px;
	display: inline-block;
	*/
}






======================= Оформление блоков =======================

Факторы качественной верстки

1.  Надежность
2.  Удобство
3.  Скорость
4.  Семантика и доступность



СВОЙСТВА ОФОРМЛЕНИЯ БЛОКОВ



BORDER - граница
Оталкивает контент от границ блока как паддинг работает

Анатомия:
	свойство: толщина стиль цвет;
Стиль:
	solid - прямая
	dotted - точки
	dashed - пунктир
	double - двойная
Свойства сторон
    Универсальное свойство 
	(для всех сторон сразу) 
    border: 10px solid #000;
если требуется все одинаковые а одна сторона другая
    border: 10px solid #000;
	border-top: none;



border-radius - граница

Устанавливает радиус скругления уголков блока.
border-radius: верхний-левый верхний-правый нижний-правый нижний-левый;
Круг (круг для квадратного объекта):
border-radius: 50%;



outline - обводка

Универсальное свойство, одновременно устанавливающее цвет, 
стиль и толщину внешней границы на всех четырех сторонах элемента. 



box-shadow - Добавляет тень к элементу.

Анатомия
box-shadow: сдвиг_по_гориз сдвиг_по_верт радиус(размытие) расстояние(размер) цвет
Можно добавить много теней. 
Можно добавить внутренную тень. 
На тень влияет свойство border-radius.
    box-shadow: 10px 10px 10px 10px #000;
inset - внутрення тень
    box-shadow: inset 0px 0px 10px 0px #000, 0 0 10px 0 red;



opacity - Определяет уровень прозрачности элемента.
от 0 до 1



visibility - устанавливает враимодействие с объектом.


















======================= background =======================
background



    /* Цвет фона */
	background-color: red;
	/* Установка фонового изображения */
	background-image: url("../img/ava.png");
	/* Установка цветового градиента */
	/* background-image: linear-gradient(to bottom, rgba(236, 232, 157, 1) 0%, rgba(94, 83, 115, 1) 50%, rgba(24, 181, 164, 1) 100%); */
	/* Управление повторением изображения (no-repeat, repeat-x, repeat-y, repeat, space, round, space repeat)*/
	background-repeat: no-repeat;
	/* Позиция изображения (словестные или , цифры прценты или жесткие)*/
	background-position: 0 0;
	/* Размер изображения (ширина высота (200px auto)) (Значения: contein-рястянуто по наименьшему размеру блока, cover - пропорциональтно занимает весь блок (еще и position center и огонь))*/
	background-size: auto;
	/* Фиксация изображения scroll, fixed */
	background-attachment: scroll;




	/* Универсальное свойство */
	/* background: red url("../img/ava.png") 0 0 / cover no-repeat; */

	/* background: цвет картина или градиент позиция / размер повторение фиксация , 
    мультикартинка мжно несеолько разных чем ближе к свойству тем выше картинка,...;
	Цвет ожно указывать только в последнем слое!! */


















======================= Псевдоклассы и псевдоэлементы =======================
/* Псевдоклассы */

/*
Анатомия:
селектор:псевдокласс{
	стили учитывая псевдокласс
}

Вложенность
селектор:псевдокласс селектор{
	стили учитывая псевдокласс
}
*/

/* Псевдоклассы состояния */

/*
:hover
Срабатывает при наведении на элемент, 
часто применяется применяется как для ссылок так
и для любого другого элемента.
*/
.link-example:hover {
	margin: 1px 0px 0px 0px;
	background-color: rgb(3, 151, 3);
	box-shadow: 0 4px 0 0 #000;
}
/*
.text-example {
	padding: 15px;
}
.text-example:hover {
	background-color: #eee;
}
*/

/*
:active
Срабатывает при нажатии на элемент. 
В основном применяется к ссылкам и кнопкам.
*/
.link-example:active {
	margin: 4px 0px 0px 0px;
	box-shadow: 0 0px 0 0 #000, inset 0 0px 5px 0 #000;
}

/*
:visited
Срабатывает для посещенных ссылок
*/
.link-example:visited {
	background-color: #666;
}
/*
Замечание: Из-за причин приватности, 
браузеры строго ограничивают стили, которые вы 
можете применить к элементу, используя этот псевдо-класс:
 только color, background-color, border-color,
  border-bottom-color, border-left-color, border-right-color,
   border-top-color, outline-color, column-rule-color, 
	fill и stroke. Заметьте также, что альфа-канал будет 
	игнорироваться: будет использоваться альфа-канал, 
	используемый для непосещённых ссылок вместо него 
	(но если прозрачность - 0, то в этот случае 
	игнорируется весь цвет, и один из используемых 
	стилей для непосещённых ссылок).
*/

/*
:focus
Срабатывает при получении элементом фокуса. 
Часто применяется к елементам форм и прочим интерактивным 
объектам
*/
.link-example:focus {
	/* outline: 5px dotted green; */
}

/*
:target
Срабатывает когда элемент является объектом 
на который ссылаются
*/
.text-example:target {
	/* display: block; */
}

/* ------------------------------------- */

/* Псевдоклассы положения в коде */

.text-block p {
	background-color: #7a956b;
	padding: 15px;
}

/* Убераем последний отступ */
.text-block p:not(:last-child) {
	margin: 0px 0px 20px 0px;
}

/*
.text-block p {
	margin: 0px 0px 20px 0px;
}
.text-block p:last-child {
	margin-bottom: 0;
}
*/

/*
:first-child
:first-of-type
Обращение к первому элементу в блоке
*/
.text-block p:first-child {
	/* background-color: #794f45; */
}

/* Любой первый элемент */
/*
.text-block *:first-child {
	background-color: #794f45;
}
*/
.text-block p:first-of-type {
	/* background-color: #794f45; */
}

/*
:last-child
:last-of-type
Обращение к последнему элементу в блоке
*/

/* Любой последний элемент */
/*
.text-block *:last-child {
	background-color: #794f45;
}
*/

.text-block p:last-child {
	/* background-color: #794f45; */
}
.text-block p:last-of-type {
	/* background-color: #794f45; */
}

/*
:nth-child(порядковый номер элемента)
Обращение к конкретным элементам в блоке
Информация: https://developer.mozilla.org/ru/docs/Web/CSS/:nth-child
*/

.text-block p:nth-child(3),
.text-block p:nth-child(2) {
	/* background-color: #77608d; */
}

/* Ко всем нечетным */
.text-block p:nth-child(odd) {
	/* background-color: #77608d; */
}
/* Ко всем четным */
.text-block p:nth-child(even) {
	/* background-color: #77608d; */
}
/* Каждый третий */
.text-block p:nth-child(3n) {
	/* background-color: #77608d; */
}
/* Каждый третий начиная с четвертого */
.text-block p:nth-child(3n + 4) {
	/* background-color: #77608d; */
}

/*
Нужно обратиться к первому <P>
внутри родителя
*/
.text-block *:first-child {
	/* background-color: #794f45; */
}
.text-block p:first-of-type {
	/* background-color: #77608d; */
}
.text-block p:nth-child(1) {
	/* background-color: #794f45; */
}

/*
:nth-of-type() 
Обращение к конкретным элементам в блоке по типу
*/
.text-block p:nth-of-type(odd) {
	/* background-color: #77608d; */
}

/*
:not(селектор/псевдокласс) исключение
*/
.text-block p:not(.text) {
	/* background-color: #794f45; */
}

/* Хорошая практика */

.block {
	background-color: #794f45;
	padding: 15px;
	color: #fff;
}
/* Убрать отступ у любого последнего объекта */
.block > *:last-child {
	margin-bottom: 0;
}

.title-block {
	font-size: 30px;
	margin: 0px 0px 10px 0px;
}
.text-block {
	line-height: 130%;
	margin: 0px 0px 20px 0px;
}
.link-block {
	color: yellow;
	display: inline-block;
	margin: 0px 0px 15px 0px;
}

/*-----------------------------------------------*/

/* Псевдоэлементы */

.pseudo {
	background-color: #7a956b;
	padding: 30px;
}
/*
Анатомия
селектор::псевдоэлемент{
	стили
}
*/

/*
Псевдоэлемент ::first-line задает стиль 
первой строки текста
*/
.text-pseudo::first-line {
	/* color: #fff; */
}

/*
Псевдоэлемент ::first-letter определяет стиль 
первого символа в тексте элемента, 
*/
.text-pseudo::first-letter {
	/* color: #fff; */
}

/* Добавление контента до 
и после содержимого объекта 

!!!ВАЖНО!!!
1) ::before и ::after НЕ работают 
без параметра content:"";
2) ::before и ::after - СТРОЧНЫЕ!!!
*/
.text-pseudo::before {
	/* content: "Я before"; */
}
.text-pseudo::after {
	/* content: " а я after"; */
}

/* Пример */

.list-pseudo li {
	padding: 0px 0px 0px 30px;
}
.list-pseudo li::before {
	content: "";
	width: 20px;
	height: 20px;
	display: inline-block;
	margin: 0px 10px 0px -30px;
	background: url("../img/logo.png") 0 0 / 20px no-repeat;
	transition: all 0.3s ease 0s;
}
.list-pseudo li:hover::before {
	transform: rotate(360deg) scale(1.3);
}

/* Синтаксис записи псевдоэлемента и псевдокласса */
/*
селектор:псевдокласс::спевдоэлемент
*/

.title {
	margin: 0px 0px 20px 0px;
	display: inline-block;
	font-size: 30px;
	font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
}
.title::after {
	content: "";
	display: block;
	height: 2px;
	width: 30%;
	margin: 5px 0px 0px 0px;
	background-color: #000;
}

.num-list {
	counter-reset: item;
}
.num-list li::before {
	counter-increment: item;
	content: "(" counter(item) ")";
	margin: 0px 10px 0px 0px;
	color: red;
	font-size: 40px;
}

.num-list li:hover + li {
	color: red;
}

/* Пример с visibility: hidden; */
.object {
}
.block-object {
	background-color: #77608d;
	padding: 15px;
}
.object:hover .block-object {
	visibility: hidden;
}

/* Отключает взаиможествие с курсором */
/* pointer-events: none; */


















======================= БЭМ =======================
<!-- Б.Э.М. -->

				<!-- Блок -->
				<!-- 
				НЕЗАВИСИМЫЙ объект.
				НЕ влияет на окружение (внешние объекты).

				Имя класса БЭМ блока:
				1) Имя должно соответствовать 
					содержанию либо конструкции
					Отвечать на вопрос "Что это?"
				2) Английский язык (Латиница)
				3) Нижний регистр
				4) Если слов несколько, разделяем дефисом (-).
				5) НИКАКОЙ ИЕРАРХИИ!!!

				Мы можем вкладывать 
				сколько угодно БЭМ блоков друг в друга,
				также БЭМ блоки можно вкладывать в БЭМ элементы
				-->

<!-- Элемент -->
				<!-- 
				ЗАВИСИМЫЙ объект от своего БЭМ блока
				ВСЕГДА находится внутри своего БЭМ блока
				МОЖЕТ влиять на окружение (внешние объекты)

				Имя класса БЭМ элемента:
				0) Всегда начинается с имени 
				первого родительского БЭМ блока и отделяется 
					двумя нижними подчеркиваниями (__)
				1) Имя должно соответствовать 
					содержанию либо конструкции.
					Отвечать на вопрос "Что это?"
				2) Английский язык (Латиница)
				3) Нижний регистр
				4) Если слов несколько, разделяем дефисом (-).
				5) НИКАКОЙ ИЕРАРХИИ!!!

				БЭМ элементы можно вкладивать в другие 
				БЭМ элементы своего БЭМ блока
				-->

<!-- Модификатор -->
				<!-- 
				Позволяет вносить отличия 
				для БЭМ блока либо БЭМ элемента

				Имя класса БЭМ модификатора:
				0) Добавляется как еще один класс
				для БЭМ блока или БЭМ элемента.
				Начинается с полного имени БЭМ блока или БЭМ элемента и отделяется 
					одним нижними подчеркиванием (_)
				1) Имя должно соответствовать 
					вносимым модификациям. Отвечать на вопрос "какой? что изменяем?"
				2) Английский язык (Латиница)
				3) Нижний регистр
				4) Если слов несколько, разделяем дефисом (-).
				5) НИКАКОЙ ИЕРАРХИИ!!!
				-->

<!-- Микс -->
				<!-- 
				Смесь БЭМ блока и БЭМ элемента 
				для одного объекта.
				При этом БЭМ элемент может
				выступать в роли БЭМ модификатора
				-->

















======================= SCSS =======================
//  импорт Файл обнуляющих стилей run
//  с подчеркиванием для не создаания файла
//  * изменил горло в глобальном файле, и поэтому новые файлы не создают
@import "_nullstyle";

// Переменные для блока
$fz: 50px;
$color_1: #000;
$color_2: #fff;

// Шаблон №1
%sh-tplborder {
	font-size: 40px;
	border-bottom: 5px dashed rgba(136, 255, 0, 0.685);
}
.с-tplborder {
	font-size: 40px;
	border-bottom: 5px dashed rgba(136, 255, 0, 0.685);
}

@mixin fontz($f, $c) {
	font-size: $f;
	color: $c;
}

.block {
	width: 300px / 960px * 100%;
	background-color: #666;
	padding: 30px;
	line-height: 60px;
	&__text {
		font-size: $fz;
		span {
			color: green;
		}
	}
}

.link {
	@include fontz(80px, green);
	color: $color_1;
	text-decoration: underline;
	font-size: $fz;
	.block & {
		font-size: $fz;
	}
	&:hover {
		color: $color_2;
	}
	@extend .с-tplborder;
}
.link-2 {
	@include fontz(40px, green);
	border-bottom: 5px dashed #000;
	@extend %sh-tplborder;
}


Сайт препроцессора SASS
https://sass-scss.ru/guide/
=================================================
ОЧЕНЬ ценю твой ЛАЙК и КОММЕНТ!
Поддержать канал: https://www.patreon.com/freelancerlifestyle
Telegram канал: https://t.me/freelancer_lifestyle или https://teleg.run/freelancer_lifestyle
Instagram: https://www.instagram.com/freelancer.lifestyle/
Facebook: https://www.facebook.com/freelancerlifestyle/
Telegram ЧАТ: https://t.me/flschat или https://teleg.run/flschat















======================= META =======================
--------------------------------------------
ОЧЕНЬ ценю твой ЛАЙК и КОММЕНТ!
Поддержать канал: https://www.patreon.com/freelancerlifestyle
Telegram канал: https://t.me/freelancer_lifestyle или https://teleg.run/freelancer_lifestyle
Instagram: https://www.instagram.com/freelancer.lifestyle/
Facebook: https://www.facebook.com/freelancerlifestyle/
Telegram ЧАТ: https://t.me/flschat или https://teleg.run/flschat
--------------------------------------------

Основные теги влияющие на отображение страницы

<!-- Кодировка страницы -->
<meta http-equiv="Content-type" content="text/html;charset=UTF-8">
С появлением HTML5 можно использовать 
<meta charset="UTF-8">
<!-- Настройки адаптивности страницы  -->
Фиксированная ширина
<meta name="viewport" content="width=1170">
Адаптивность
<meta name="viewport" content="width=device-width">

<!-- Отключает принудительную ссылку у номера телефона на iOS -->
<meta name="format-detection" content="telephone=no">

<!-- задать масштаб страницы -->
initial-scale=1 (от 0.1 до 1 ) масштабирование страницы
<meta name="viewport" content="width=device-width, initial-scale=1">


user-scalable=1 (1 или 0) Разрешение пользователям менять масштаб страницы
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0">

--------------------------------------------

SEO

<!-- Краткое описание страницы  -->
<meta name="description" content=" ">
Пишем не более 140 символов.
<!-- Ключевые слова страницы  -->
<meta name="keywords" content=" "> 
Пишем не более 20ти слов. Ключевые фразы разделяем запятой.

<!-- Управление доступом поисковых роботов к странице -->
<meta name="robots" content="">

По умолчанию страница индексируется поисковыми система, то есть этот мета тег дополнительно указывать не нужно. Но если задача стоит запретить либо ограничить индексацию, то существуют следующие значения:

none – запретить индексацию страницы полностью.
noindex – запретить индексацию содержимого страницы.
nofollow – игнорировать ссылки в пределах веб-страницы. 
noimageindex - запретить индексацию присутствующих на странице изображений
noarchive - запретить  вывод в результатах поиска ссылки «Сохраненная копия»
nosnippet - запретить  вывод в поисковой выдаче под названием страницы фрагмента текста, описывающего её содержание.

Значения указываются через запятую. Например:

Запрет индексации страницы полностью будет выглядеть так:
<meta name="robots" content="noindex, nofollow">
или так
<meta name="robots" content="none">

Запрет индексации ссылок и изображений на странице будет выглядеть так:
<meta name="robots" content="noimageindex, nofollow">
при этом текст страницы будет доступен к индексации.

--------------------------------------------
Технические
<!-- Автор страницы -->
<meta name="Author" content="Пупкин Василий Петрович"> 
<!-- Авторские права -->
<meta name="Copyright" content="Зимина Татьяна Юрьевна"> 
<!-- Адрес автора -->
<meta name="Address" content="Луна, кратер №97">
<!-- Редирект (перезагрузка) страницы. Задержка в секундах; url=Адрес сайта/страницы -->
<meta http-equiv="refresh" content="S; url=URL">

S= Задержка в секундах
URL= Адрес сайта/страницы

--------------------------------------------

Для социальных сетей
 
Facebook
Что бы настроить вид нашей страницы в посте мы пишем следующие мета теги:

<!-- локализация сайта, для русскоязычного сайта ru_RU -->
<meta property="og:locale" content="ru_RU">
<!-- тип контента, по умолчанию используется article -->
<meta property="og:type" content="article">
<!-- заголовок страницы, который будет выводится в записи социальной сети -->
<meta property="og:title" content="META теги">
<!-- описание страницы -->
<meta property="og:description" content="Описание страницы про META теги">
<!-- ссылка на изображение, которое будет публиковаться в записи -->
<meta property="og:image" content="http://fls.guru/meta/img/bg.jpg">
<!-- ссылка на текущую страницу -->
<meta property="og:url" content="http://fls.guru/meta/ ">
<!-- название сайта -->
<meta property="og:site_name" content="Фрилансер по жизни">

Проверить разметку можно в валидаторе от Facebook https://developers.facebook.com/tools/debug/sharing/


Подробнее о протоколе Open Graph можно почитать в официальной документации по ссылке в описании. https://ruogp.me/

Для создания Twitter Cards мета теги будут иметь другой вид:

<!-- Тип карты, по умолчанию используется summary -->
<meta name="twitter:card" content="summary">
<!-- Имя/логин автора -->
<meta name="twitter:site" content="Жека">
<!-- Название страницы -->
<meta name="twitter:title" content="META теги">
<!-- Описание страницы -->
<meta name="twitter:description" content="про META теги">
<!-- Cсылка на изображение -->
<meta name="twitter:image" content="http://fls.guru/meta/img/bg.jpg">

Проверяем результат в валидаторе твиттер 
https://cards-dev.twitter.com/validator

Подробнее о создании Twitter Cards можно почитать в официальной документации по ссылке в описании.
https://developer.twitter.com/en/docs/tweets/optimize-with-cards/guides/getting-started



















======================= position =======================
Свойство position
Устанавливает способ позиционирования элемента относительно окна браузера или других объектов 
на веб-странице. Вспомогательные свойства left, right, top и bottom управляют положением элемента, 
а z-index управляет наложением друг на друга по оси Z.

Значения:
static - элемент позиционируется относительно родителя и соседних элементов
relative - элемент позиционируется как static но можно двигать его относительно своего положения
absolute - элемент позиционируется относительно ближайшего родителя с relative, absolute, fixed и sticky
fixed - элемент позиционируется относительно окна браузера
sticky - элемент позиционируется как static но когда верхняя граница элемента будет 
находиться на расстоянии, указанном в параметре top, от верхней границы окна браузера (либо указанном в параметре bottom от нижней), 
он останется в этом положении относительно окна до тех пор пока его нижняя граница 
не упрется в другой sticky элемент или конец родительского элемента
inherit - берет значение от родителя
----------------------------------------------------------
Свойства:
top, bottom, left и right - управляют положением элемента сверху снизу слева и справа.
Значения могут указываются в том числе в процентах и могут иметь отрицательные значения.
Работают с элементами к которым применен один из параметров 
position:relative,position:absolute,position:fixed и position:sticky (только top или bottom)
----------------------------------------------------------
Свойство: z-index
Управляет наложением друг на друга элементов с
параметрами position:relative,position:absolute,position:fixed по оси Z


















======================= flex =======================
flex
display:flex;
"Включает" флекс разметку. флекс контейнер блочный

display: inline-flex;
как инлайн блок контейнер становится

положение флекс элементов по горезонтальной оси
justify-content:;
Значения:
    flex-start; выравниввание влево в начало контейнера
    flex-end; выравнивание в право
    center; по центру
    space-between; пространство между flex елементами первый в начале последний в конце между каждым флкс элементом одинаковое пространство отступов нет это пространство
    space-around; у flex элементов одинаковое простронство слева и справа

Выстраивание элементов по вертикали
align-items:;
Значения 
    stretch; элементы подстраиваются под высоту самого высокого
    flex-start; прижмет элементы вверх
    flex-end; прижмет вниз
    center; все выстрояца по горизонтальному центру
    baseline; выстротится по базовой линии

flex-wrap:;
по умолчанию flex-wrap:nowrap;
Значения:
    nowrap;(по умолчанию)
    wrap; перебегать на след строку
    wrap-reverse; перебегает но задом наперед

flex-direction:; - установка основной оси 
Значение
    row - ряд
    row-reverse - разворот элементов и обратный порядок
    column - колонка

/* -------------------------------------------------------------- */

Свойства для флекс элементов


align-self - свойство для flex элемента. Оно перезаписывает свойство которое применено к контейнеру "align-items".
Значения:
    stretch; элементы подстраиваются под высоту самого высокого
    flex-start; прижмет элементы вверх
    flex-end; прижмет вниз
    center; все выстрояца по горизонтальному центру
    baseline; выстротится по базовой линии

order - порядок вывода элементов.
order:1; order:2; и т.д.

flex-basis:; - Базовый размер элемента. по умолчанию auto.

flex-grow:; - возможность увеличиваться флекс элементу относительно базового размера. По умолчанию 0. Если поставить 1 то займется весь контейнер.

flex-shrink:; - возможность уменьшаться в размере чем базовый размер. По умолчанию 1.

Унивирсальное свойство
flex: flex-grow flex-shrink flex-basis
flex: 0 1 auto;



















======================= adaptive =======================
Условия медиазапросов (@media)

Тип устройства:
all 	Подходит для всех типов устройств.
print 	Предназначен для страничных материалов и документов, просматриваемых на экране в режиме предварительного просмотра печати.
screen 	Предназначен в первую очередь для экранов цветных компьютерных мониторов.
speech 	Предназначен для синтезаторов речи.

Характеристики устройства:
width 	
Проверяет ширину области просмотра. Значения задаются в единицах длины, px, em и т.д., например, (width: 800px). Обычно для проверки используются минимальные и максимальные значения ширины.
min-width 
применяет правило если ширина области просмотра больше значения, указанного в запросе, max-width — ширина области просмотра меньше значения, указанного в запросе.
height 	
Проверяет высоту области просмотра. Значения задаются в единицах длины, px, em и т.д., например, (height: 500px). Обычно для проверки используются минимальные и максимальные значения высоты.
min-height 
применяет правило если высота области просмотра больше значения, указанного в запросе, max-height — высота области просмотра которого меньше значения, указанного в запросе.
aspect-ratio 	
Проверяет соотношение ширины к высоте области просмотра. Широкоэкранный дисплей с соотношением сторон 16:9 может быть помечен как (aspect-ratio: 16/9).
min-aspect-ratio 
проверяет минимальное соотношение, max-aspect-ratio — максимальное соотношение ширины к высоте области просмотра.
orientation 	
Проверяет ориентацию области просмотра. Принимает два значения: (orientation: portrait) и (orientation: landscape).
resolution 	
Проверяет разрешение экрана (количество пикселей). Значения также могут проверять количество точек на дюйм (dpi) или количество точек на сантиметр (dpcm), например, (resolution: 300dpi).
min-resolution 
проверяет минимальное разрешение экрана, max-resolution — максимальное.
color 	
Проверяет количество бит на каждый из цветовых компонентов устройства вывода. Например, (min-color: 4) означает, что экран конкретного устройства должен иметь 4-битную глубину цвета.
min-color 
проверяет минимальное количество бит, max-color — максимальное количество бит.
color-index 	
Проверяет количество записей в таблице подстановки цветов. В качестве значения указывается положительное число, например, (color-index: 256).
min-color-index 
проверяет минимальное количество записей, max-color-index — максимальное количество записей.
monochrome 	
Проверяет количество битов на пиксель монохромного устройства. Значение задается целым положительным числом, например, (min-monochrome: 8).
min-monochrome 
проверяет минимальное количество битов, max-monochrome — максимальное количество битов.
-webkit-device-pixel-ratio 	
Задаёт количество физических пикселей устройства на каждый CSS-пиксель.




















======================= Селекторы атрибутов =======================
/* Селекторы атрибутов */

/* Конкретый поиск */
[href="https://google.com"]
{
	/* color: red; */
}
/* Поиск окончания */
[href$=".com"] {
	/* color: red; */
}
/* Поиск начала */
[href^="http"] {
	/* color: red; */
}
/* Поиск слова из указанных через пробелы */
[class~="body-about"] {
	/* color: red; */
}
/* Поиск слова из указанных через дефис */
[class|="body-about"] {
	/* color: red; */
}
/* Поиск по любому вхождению */
[href*=":"] {
	/* color: red; */
}
/* Ограничивающий контейнер */
[class*="__container"] {
	max-width: 800px;
	margin: 0px auto;
}

























======================= transform =======================

.block {
	/* width: 100%; */
	width: 200px;
	height: 200px;
	background-color: rgba(255, 255, 255, 0.1);
	position: relative;

	/* Установка глубины и смена точки начала координат. */
	/* 
	perspective: 400px;
	perspective-origin: 0 0;
	 */

	/* Определяет, как дочерние элементы должны 
	 отображаться в 3D-пространстве. */
	/* transform-style: flat;
		transform-style: preserve-3d;
	*/
}

/* 
С помощью 2D и 3D трансформации мы сможем сдвигать, 
поворачивать, масштабировать элементы и делать многое другое!
*/

.block__item {
	background-color: #7a956b;
	width: 200px;
	height: 200px;
	line-height: 200px;
	text-align: center;
	text-transform: uppercase;
	color: #fff;

	/* 
	Сдвигает элемент на новое место, перемещая относительно 
	изначального положения объекта вправо и вниз, 
	используя координаты X и Y. (translateX(50%), translateY  по отдельности) можно и px и %
	Записывается следующим образом translate (x,y).
	*/
	/* transform: translate(0%, 0%); */

	/*
	Масштабирует элементы, делая их больше или меньше.(по осям тоже)
	*/
	/* transform: scale(1, 0.5); */

	/* Поворачивает элементы. Есть X и Y тоже интересно*/ 
	/* transform: rotate(45deg); */

	/* Деформирует (наклоняет) элементы. */
	/* transform: skew(-5deg, 60deg); */

	/* Позволяет объединить несколько функций 2D-трансформаций в одной. */
	/* transform: translate(10%, 10%) scale(0.5) rotate(45deg); */

	/* 
	Позволяет сместить центр трансформации, относительно которого 
	происходит изменение положения/размера/формы элемента.
	*/
	/* transform-origin: 0px 0px; */

	/* Отображение обратной стороны объекта. */
	/* backface-visibility: hidden; */
}

.block:hover .block__item {
}

[data-container] {
	margin: 0px auto;
	max-width: 300px;
}



















======================= Анимация =======================
---------------transition-----------------------

CSS – переходы либо CSS – transitions могут применяться ко всем элементам и даже к псевдоэлементам. Используются для оживления нашей верстки. Что в свою очередь приводит к улучшению взаимодействия с пользователем, как правило путем приятной анимированной реакции на его действия. Например – наведение и нажатие на кнопку. Также свойства transition можно использовать для построения несложных сценариев анимации. Фактически, CSS – переходы обеспечивают смену значений других свойств с определенной анимацей и сценарием. Всю эту магию можно описать универсальным CSS свойcтвом transition, либо рядом следующих отдельных свойств


transition-duration: 0.2s; (единицы измерения  s, ms (секунды , милисекунды))
Определяет промежуток времени, в течение которого должен осуществляться переход. Собственно – тут мы указываем время за которое одно значение свойства по переходит (анимируется) в другое. Свойство не наследуется.
(transition-duration: 0.2s, 1.2s; можно через запятую для нескоьких свойств в)

transition-property: all;
Содержит название CSS-свойств, к которым будет применен эффект перехода. Значение свойства может содержать как одно свойство, так и список свойств через запятую. Свойство не наследуется.	
(transition-property: color, font-size;)

transition-delay: 1s; (можно несколько transition-delay: 1s, 2s; )
Задержка выполнения перехода. Позволяет сделать так, чтобы изменение свойства происходило не моментально, а с некоторой задержкой. Время задержки перехода указывается в секундах или миллисекундах. Свойство не наследуется.

Задаёт стиль нашего перехода, то есть некий сценарий, по которому будет осуществятся анимация.

transition-timing-function: ease; (Значения: ease, linear, steps(int,start|end)(step(2,start)))
cubic-bezier(x1,y1,x2,y2)
Переход начинается медленно, разгоняется быстро и замедляется в конце. 

Универсальное свойство
	transition: 0.3s;
	Порядок значений:
	property duration timing-function dela y 




--------------------------------------Animation--------------------------------------
Как и CSS свойство плавных переходов transition, о котором мы говорили в предыдущем уроке, свойство animation призвано сделать нашу верстку более динамичной, оживить её для лучшего взаимодействия с пользователем и создания WOW эффекта.

Но в отличие от CSS переходов, создание анимации базируется на ключевых кадрах @keyframes, которые позволяют автоматически воспроизводить и повторять эффекты на протяжении заданного времени, а также приостанавливать анимацию по определенному событию.

Другими словами, использование конструкции animation и @keyframes позволяет нам создавать более сложные сценарии анимаций.

animation-name: somename;
Определяет список применяемых к элементу анимаций (ключевых кадров). Можно указать через запятую. Причем приоритет у последней записи.


animation-timing-function: linear;
Задаёт сценарий развития анимации между ключевыми кадрами.

animation-delay: 0s;
Отвечает за задержку перед проигрыванием.

animation-iteration-count: 1; (infinit бесконечно)
Отвечает за повтор проигрывания ключевых кадров.

animation-direction: alternate; (normal, revers, alternate(туда обратно), alternate-reverse)
Определяет направление и тип проигрывания ключевых кадров.

animation-fill-mode: none;(forwords (конечное), backwords(изначальное))
Определяет какие значения анимируемых css свойств применятся к объекту после завершения анимации.

animation-play-state: running; (paused)
Позволяет запускать или останавливать анимацию по событию.

.block {
	animation-name: somename;
    ...
    }

@keyframes somename {
	0% {
		...
	}
	50% {
		...
	}
	100% {
		...
	}
}
