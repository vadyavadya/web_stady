'use strictr'

// * Цыклы
// Цикл while
/* let i = 0;
while (i < 5) {
	console.log(i);
	i++;
} */

// если тело состоит из одной строки
/* let i = 0;
while (i < 5) console.log(i++); */

// Конструкция DO...while
/* let i = 0;
do {
	console.log(i);
	i++
} while (i < 5); */


// Цикл for
// for (Начало; Условие; Шаг) {
// 	тело цикла
// }

/* for (let i = 0; i < 5; i++) {
	console.log(i);
} */

// можно убрать любую часть цикла
/* let num = 0;
for (; num < 5; num++) {
	console.log(num);
} */

// * можно остановить выполнение цикла break
/* for (let i = 0; i < 5; i++) {
	console.log(i);
	if (i == 2) break;
} */

// * перейти на следущую итерацию continue

// * метки  перейти на следующкю итерацию внешнего цикла
/* firstFor: for (let num = 0; num < 2; num++) {
	for (let size = 0; size < 3; size++) {
		if (size == 2) {
			continue firstFor;
		}
		console.log(size);
	}
} */

// * Итоги и домашка
/*
1.	while – Проверяет условие перед каждой итерацией.
2.	do..while – Проверяет условие после каждой итерации.
3.	for (;;) – Проверяет условие перед каждой итерацией,
	есть возможность задать дополнительные настройки.

Чтобы организовать бесконечный цикл, используют
конструкцию while (true).
При этом он, как и любой другой цикл, может быть
прерван директивой break.

Если на данной итерации цикла делать больше
ничего не надо, но полностью прекращать цикл не
следует – используют директиву continue.

Обе этих директивы поддерживают метки, которые ставятся
перед циклом. Метки – единственный способ для break/continue
выйти за пределы текущего цикла, повлиять на выполнение внешнего.
Помним, что метки не позволяют прыгнуть в произвольное место кода,
в JavaScript нет такой возможности.

Конечно же в JavaScript существуют и другие методы перебора.
Например, перебор объектов или массивов. О них мы поговорим
в отдельных уроках, а пока домашка.
*/